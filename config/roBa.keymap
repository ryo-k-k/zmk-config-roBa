#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 80

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        COPY {
            bindings = <&kp LC(C)>;
            key-positions = <33 24>;
        };

        PAST {
            bindings = <&kp LC(V)>;
            key-positions = <33 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        dc: dc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp MB1 &mkp MB1>;
            label = "DC";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt LEFT_WIN Q             &kp W         &kp E     &kp R             &kp T                                                 &kp Y      &kp U  &lt 5 I      &kp O    &kp P
&lt 3 A                    &kp S         &kp D     &kp F             &kp G        &kp LS(LG(S))             &kp MINUS      &kp H      &kp J  &lt 4 K      &kp L    &mt LEFT_SHIFT MINUS
&mt LEFT_SHIFT Z           &kp X         &kp C     &kp V             &kp B        &kp COLON                 &kp SEMICOLON  &kp N      &kp M  &lt 5 COMMA  &kp DOT  &mt LEFT_CONTROL UNDERSCORE
&mt LEFT_SHIFT LANGUAGE_2  &kp LEFT_ALT  &mkp MB1  &lt 2 LANGUAGE_1  &lt 1 SPACE  &lt_to_layer_0 6 TAB      &kp BACKSPACE  &kp ENTER                               &kp DEL
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        FUNCTION {
            bindings = <
&kp EXCLAMATION  &kp DOUBLE_QUOTES  &kp HASH              &kp DOLLAR             &kp PERCENT                            &kp NUMBER_0  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp EQUAL
&kp AT_SIGN      &kp SQT            &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp COLON      &trans      &kp COMMA   &kp SLASH     &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp ASTERISK
&kp AMPERSAND    &kp SLASH          &kp LESS_THAN         &kp GREATER_THAN       &kp SEMICOLON  &trans      &kp PERIOD  &kp MINUS     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PLUS
&kp LCTRL        &kp UNDERSCORE     &kp QUESTION          &trans                 &trans         &trans      &trans      &trans                                                  &kp DOT
            >;
        };

        NUM {
            bindings = <
&kp F12  &kp F11  &kp F10  &kp F9  &trans                      &trans  &kp F9  &kp F10  &kp F11  &kp F12
&kp F8   &kp F7   &kp F6   &kp F5  &trans  &trans      &trans  &trans  &kp F5  &kp F6   &kp F7   &kp F8
&kp F4   &kp F3   &kp F2   &kp F1  &trans  &trans      &trans  &trans  &kp F1  &kp F2   &kp F3   &kp F4
&trans   &trans   &trans   &trans  &trans  &trans      &trans  &trans                            &trans
            >;
        };

        ARROW {
            bindings = <
&trans     &trans        &trans                &trans          &trans                         &trans  &trans    &kp UP_ARROW    &trans     &trans
&trans     &kp LEFT_WIN  &kp LG(LEFT_CONTROL)  &kp LEFT_SHIFT  &trans     &trans      &trans  &trans  &kp LEFT  &kp DOWN_ARROW  &kp RIGHT  &trans
&kp LC(Z)  &kp LC(X)     &kp LC(C)             &kp LC(V)       &kp LC(B)  &trans      &trans  &trans  &trans    &trans          &trans     &trans
&trans     &trans        &trans                &trans          &trans     &trans      &trans  &trans                                       &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        MOUSE {
            bindings = <
&trans     &trans     &trans     &trans     &trans                         &trans     &trans    &trans  &trans    &trans
&kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(F)  &kp LC(F)  &trans      &trans  &kp LC(H)  &mkp MB1  &trans  &mkp MB2  &trans
&kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(B)  &trans      &trans  &trans     &trans    &trans  &trans    &trans
&trans     &trans     &trans     &trans     &trans     &trans      &trans  &trans                                 &trans
            >;
        };

        SCROLL {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2      &bt BT_SEL 3    &bt BT_SEL 4                      &trans  &trans    &kp UP_ARROW  &trans     &trans
&trans        &kp LEFT_WIN  &kp LC(LEFT_WIN)  &kp LEFT_SHIFT  &trans        &trans      &trans  &trans  &kp LEFT  &kp DOWN      &kp RIGHT  &trans
&kp LC(Z)     &kp LC(X)     &kp LC(C)         &kp LC(V)       &kp LC(B)     &trans      &trans  &trans  &trans    &trans        &trans     &trans
&trans        &trans        &trans            &trans          &trans        &trans      &trans  &trans                                     &trans
            >;
        };

        layer_6 {
            bindings = <
&kp LG(W)       &kp LG(TAB)    &kp LG(LC(LEFT))   &kp LC(LG(RIGHT))  &trans                              &kp PAGE_UP    &bt BT_SEL 1  &kp UP_ARROW       &bt BT_SEL 3     &bt BT_SEL 4
&kp LC(LG(F4))  &kp LC(LG(D))  &kp LC(PAGE_DOWN)  &kp LC(PAGE_UP)    &kp LC(F)  &trans      &trans       &kp PAGE_DOWN  &kp LEFT      &kp DOWN_ARROW     &kp RIGHT        &kp LC(MINUS)
&kp LC(LG(V))   &kp LC(X)      &kp LC(C)          &kp LC(V)          &trans     &trans      &bootloader  &kp HOME       &kp END       &kp LA(PAGE_DOWN)  &kp LA(PAGE_UP)  &trans
&kp LS(LG(S))   &kp LG(R)      &kp C_AL_MAIL      &trans             &trans     &trans      &trans       &trans                                                           &trans
            >;
        };
    };
};
