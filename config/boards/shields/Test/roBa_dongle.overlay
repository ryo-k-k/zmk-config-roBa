#include <dt-bindings/zmk/matrix_transform.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>

/ {
    // 必須の chosen ノード
    chosen {
        zmk,kscan = &mock_kscan;
        zmk,physical-layout = &physical_layout0;
    };

    // mock_kscan の定義（キーボードの実際のスキャンを無効化する場合）
    mock_kscan: mock_kscan_0 {
        compatible = "zmk,kscan-mock";
        columns = ;
        rows = ;
        events = ;
    };

    // キーマップ変換の定義
    default_transform: keymap_transform_0 {
        compatible = "zmk,matrix-transform";
        columns = <11>;
        rows = <4>;
        map = <
            RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4)             RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10)
            RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5)     RC(3,6) RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10)
            RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5)     RC(3,7) RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10)
            RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(3,5)     RC(3,8) RC(3,9)                             RC(3,10)
        >;
    };

    // 物理レイアウトの定義
    physical_layout0: physical_layout_0 {
        compatible = "zmk,physical-layout";
        display-name = "Default Layout";
        transform = <&default_transform>;
    };

    // トラックボール入力リスナーの定義
    trackball_listener: trackball_listener_0 { // 重複を避けるため、ラベル名を明示的に変更しても良い
        compatible = "zmk,input-listener";
        device = <&trackball>;
    };

    // 左エンコーダーの定義
    left_encoder: encoder_left {
        compatible = "alps,ec11";
        // seeeduino_xiao_ble のピンアサインを確認し、適切に修正してください
        // 例: &gpio0 5 と &gpio0 0 など
        a-gpios = <&xiao_d 5 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>; 
        b-gpios = <&xiao_d 0 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        steps = <12>;
        status = "disabled"; // 後で "okay" でオーバーライドされます
    };

    // 右エンコーダーの定義
    right_encoder: encoder_right {
        status = "disabled"; // 必要に応じてピンアサインを追加してください
    };

    // センサーの定義 (エンコーダーを ZMK で利用する場合)
    sensors: sensors {
        compatible = "zmk,keymap-sensors";
        sensors = <&left_encoder &right_encoder>;
        triggers-per-rotation = <10>; // 1回転あたりのトリガー数
    };
}; // ルートノードの定義はここで閉じます

// SPI0 周辺機器のピン制御定義
&pinctrl {
    spi0_default: spi0_default {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0, 5)>,
                    <NRF_PSEL(SPIM_MOSI, 0, 4)>,
                    <NRF_PSEL(SPIM_MISO, 0, 4)>;
        };
    };

    spi0_sleep: spi0_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0, 5)>,
                    <NRF_PSEL(SPIM_MOSI, 0, 4)>,
                    <NRF_PSEL(SPIM_MISO, 0, 4)>;
            low-power-enable;
        };
    };
};

// SPI0 バスとトラックボールセンサーの定義
&spi0 {
    status = "okay";
    compatible = "nordic,nrf-spim";
    pinctrl-0 = <&spi0_default>;
    pinctrl-1 = <&spi0_sleep>;
    pinctrl-names = "default", "sleep";
    cs-gpios = <&gpio0 20 GPIO_ACTIVE_LOW>; // チップセレクトピン

    trackball: trackball@0 { // トラックボールのノード定義
        status = "okay";
        compatible = "pixart,pmw3610";
        reg = ;
        spi-max-frequency = <2000000>;
        irq-gpios = <&gpio0 6 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>; // 割り込みピン
        cpi = <600>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;

        force-awake;
        /* ZMK のアクティビティ状態が ACTIVE の間、センサーをアクティブに保ちます。
           ZMK が IDLE / SLEEP モードに移行すると、通常のダウシフトモードにフォールバックします。
           これにより、センサーは「ウェイクアップソース」として機能します。 */
    };
};

// 左エンコーダーの状態を有効にする
&left_encoder {
    status = "okay";
};
